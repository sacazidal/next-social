import { NextResponse } from "next/server";
import bcrypt from "bcrypt";
import nodemailer from "nodemailer";
import { supabase } from "@/app/lib/supabaseServer";

function generateConfirmationEmail() {
  return Math.floor(100000 + Math.random() * 900000).toString(); // –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
}

async function sendConfirmationEmail(email, code, firstName, lastName) {
  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASSWORD,
    },
  });

  const mailOptions = {
    from: process.env.SMTP_USER,
    to: email,
    subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    html: `
    <!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:opsz,wght@14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Inter", serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 0;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }
      .header {
        text-align: center;
        padding: 30px 20px;
        background: linear-gradient(135deg, #6a11cb, #2575fc);
        color: #ffffff;
      }
      .header h1 {
        margin: 0;
        font-size: 28px;
        font-weight: 700;
      }
      .content {
        padding: 30px;
        color: #333333;
      }
      .content h2 {
        font-size: 24px;
        margin-bottom: 20px;
        font-weight: 600;
      }
      .content p {
        font-size: 18px;
        line-height: 1.6;
        margin-bottom: 20px;
      }
      .code {
        display: inline-block;
        padding: 15px 30px;
        background-color: #007bff;
        color: #ffffff;
        font-size: 28px;
        font-weight: bold;
        border-radius: 8px;
        margin: 20px 0;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      .footer {
        text-align: center;
        padding: 20px;
        font-size: 14px;
        color: #777777;
        border-top: 1px solid #eeeeee;
        margin-top: 20px;
      }
      .footer a {
        color: #007bff;
        text-decoration: none;
        font-weight: 500;
      }
      .footer a:hover {
        text-decoration: underline;
      }
      .icon {
        width: 60px;
        height: 60px;
        margin-bottom: 10px;
      }
    </style>
  </head>
  <body>
    <div class="container animation">
      <div class="header">
        <img
          src="https://img.icons8.com/color/96/000000/verified-account.png"
          alt="Verified Icon"
          class="icon"
        />
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
      </div>
      <div class="content">
        <h2>–ü—Ä–∏–≤–µ—Ç, ${lastName} ${firstName}!</h2>
        <p>
          –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéâ –ß—Ç–æ–±—ã
          –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é,
          –≤–≤–µ–¥—è –∫–æ–¥ –Ω–∏–∂–µ:
        </p>
        <div class="code">${code}</div>
        <p>
          –≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏
          —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ
          –æ—à–∏–±—Å—è –∞–¥—Ä–µ—Å–æ–º.
        </p>
        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. üòä</p>
      </div>
      <div class="footer">
        <p>
          –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br />–ö–æ–º–∞–Ω–¥–∞
          <a href="https://next-social-lac.vercel.app/">Next Social Network</a>
        </p>
      </div>
    </div>
  </body>
</html>
    `,
  };

  await transporter.sendMail(mailOptions);
}

export async function POST(req) {
  const { firstName, lastName, email, username, password } = await req.json();

  try {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const fields = [
      { key: firstName, name: "–ò–º—è" },
      { key: lastName, name: "–§–∞–º–∏–ª–∏—è" },
      { key: email, name: "Email" },
      { key: username, name: "–õ–æ–≥–∏–Ω" },
      { key: password, name: "–ü–∞—Ä–æ–ª—å" },
    ];
    const missingField = fields.find((field) => !field.key);
    if (missingField) {
      return NextResponse.json(
        { message: `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ '${missingField.name}'` },
        { status: 400 }
      );
    }

    // –ø–æ–ª—É—á–µ–Ω–∏–µ ip address
    const ip = req.headers.get("x-user-ip");

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –∏ username
    const { data: existingUser, error: userError } = await supabase
      .from("users")
      .select("*")
      .or(`email.eq.${email}, username.eq.${username}`);

    if (userError) {
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" },
        { status: 500 }
      );
    }

    if (existingUser && existingUser.length > 0) {
      return NextResponse.json(
        { message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 409 }
      );
    }

    // —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmationCode = generateConfirmationEmail();

    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const { error: insertError } = await supabase
      .from("users")
      .insert([
        {
          email,
          username,
          password_hash: hashedPassword,
          first_name: firstName,
          last_name: lastName,
          confirmation_code: confirmationCode,
          confirmed: false,
          ip_address: ip,
        },
      ])
      .select();

    if (insertError) {
      return NextResponse.json(
        {
          error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î",
          details: error.message,
        },
        { status: 500 }
      );
    }

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await sendConfirmationEmail(email, confirmationCode, firstName, lastName);

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if (password.length <= 6) {
      return NextResponse.json(
        { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" },
        { status: 400 }
      );
    }

    // —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json(
      { message: "–ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email" },
      { status: 200 }
    );
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" },
      { status: 500 }
    );
  }
}
